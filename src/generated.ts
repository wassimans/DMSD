// Generated by @wagmi/cli@0.1.10 on 4/2/2023 at 13:40:05
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Counter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const counterABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'increment',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'number',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'setNumber',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DMSD
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dmsdABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'email', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LogNewUser',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'email', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LogUpdateUser',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
    ],
    name: 'deleteRecipient',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getUser',
    outputs: [
      { name: 'userEmail', internalType: 'string', type: 'string' },
      { name: 'firstName', internalType: 'string', type: 'string' },
      { name: 'lastName', internalType: 'string', type: 'string' },
      { name: 'isAdmin', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'getUserAtIndex',
    outputs: [
      { name: 'userAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userEmail', internalType: 'string', type: 'string' },
      { name: '_firstName', internalType: 'string', type: 'string' },
      { name: '_lastName', internalType: 'string', type: 'string' },
    ],
    name: 'registerAdmin',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
      { name: '_userEmail', internalType: 'string', type: 'string' },
      { name: '_firstName', internalType: 'string', type: 'string' },
      { name: '_lastName', internalType: 'string', type: 'string' },
    ],
    name: 'registerRecipient',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
      { name: '_userEmail', internalType: 'string', type: 'string' },
    ],
    name: 'updateUserEmail',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
      { name: '_firstName', internalType: 'string', type: 'string' },
    ],
    name: 'updateUserFirstName',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
      { name: '_lastName', internalType: 'string', type: 'string' },
    ],
    name: 'updateUserLastName',
    outputs: [{ name: 'success', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MultiSigWallet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multiSigWalletABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      {
        name: '_numConfirmationsRequired',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ConfirmTransaction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'balance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecuteTransaction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokeConfirmation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'SubmitTransaction',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmTransaction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'executeTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getTransaction',
    outputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      { name: 'numConfirmations', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTransactionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isConfirmed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numConfirmationsRequired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeConfirmation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'submitTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'transactions',
    outputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      { name: 'numConfirmations', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounter(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: counterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof counterABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    ...config,
  } as UseContractReadConfig<typeof counterABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"number"`.
 */
export function useCounterNumber<
  TSelectData = ReadContractResult<typeof counterABI, 'number'>,
>(
  config: Omit<
    UseContractReadConfig<typeof counterABI, 'number', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: counterABI,
    functionName: 'number',
    ...config,
  } as UseContractReadConfig<typeof counterABI, 'number', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof counterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterABI, TFunctionName>({
    abi: counterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function useCounterIncrement<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, 'increment'>['abi'],
        'increment'
      > & { functionName?: 'increment' }
    : UseContractWriteConfig<TMode, typeof counterABI, 'increment'> & {
        abi?: never
        functionName?: 'increment'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterABI, 'increment'>({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function useCounterSetNumber<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof counterABI, 'setNumber'>['abi'],
        'setNumber'
      > & { functionName?: 'setNumber' }
    : UseContractWriteConfig<TMode, typeof counterABI, 'setNumber'> & {
        abi?: never
        functionName?: 'setNumber'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof counterABI, 'setNumber'>({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__.
 */
export function usePrepareCounterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"increment"`.
 */
export function usePrepareCounterIncrement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'increment'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'increment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'increment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link counterABI}__ and `functionName` set to `"setNumber"`.
 */
export function usePrepareCounterSetNumber(
  config: Omit<
    UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: counterABI,
    functionName: 'setNumber',
    ...config,
  } as UsePrepareContractWriteConfig<typeof counterABI, 'setNumber'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__.
 */
export function useCounterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof counterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    ...config,
  } as UseContractEventConfig<typeof counterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link counterABI}__ and `eventName` set to `"Transfer"`.
 */
export function useCounterTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof counterABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: counterABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof counterABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsd(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: dmsdABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsdRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dmsdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: dmsdABI, ...config } as UseContractReadConfig<
    typeof dmsdABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"getUser"`.
 */
export function useDmsdGetUser<
  TSelectData = ReadContractResult<typeof dmsdABI, 'getUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'getUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'getUser',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'getUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"getUserAtIndex"`.
 */
export function useDmsdGetUserAtIndex<
  TSelectData = ReadContractResult<typeof dmsdABI, 'getUserAtIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'getUserAtIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'getUserAtIndex',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'getUserAtIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsdWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dmsdABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, TFunctionName>({
    abi: dmsdABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"deleteRecipient"`.
 */
export function useDmsdDeleteRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'deleteRecipient'>['abi'],
        'deleteRecipient'
      > & { functionName?: 'deleteRecipient' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'deleteRecipient'> & {
        abi?: never
        functionName?: 'deleteRecipient'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'deleteRecipient'>({
    abi: dmsdABI,
    functionName: 'deleteRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerAdmin"`.
 */
export function useDmsdRegisterAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'registerAdmin'>['abi'],
        'registerAdmin'
      > & { functionName?: 'registerAdmin' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'registerAdmin'> & {
        abi?: never
        functionName?: 'registerAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'registerAdmin'>({
    abi: dmsdABI,
    functionName: 'registerAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerRecipient"`.
 */
export function useDmsdRegisterRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'registerRecipient'>['abi'],
        'registerRecipient'
      > & { functionName?: 'registerRecipient' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'registerRecipient'> & {
        abi?: never
        functionName?: 'registerRecipient'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'registerRecipient'>({
    abi: dmsdABI,
    functionName: 'registerRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"updateUserEmail"`.
 */
export function useDmsdUpdateUserEmail<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'updateUserEmail'>['abi'],
        'updateUserEmail'
      > & { functionName?: 'updateUserEmail' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'updateUserEmail'> & {
        abi?: never
        functionName?: 'updateUserEmail'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'updateUserEmail'>({
    abi: dmsdABI,
    functionName: 'updateUserEmail',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"updateUserFirstName"`.
 */
export function useDmsdUpdateUserFirstName<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dmsdABI,
          'updateUserFirstName'
        >['abi'],
        'updateUserFirstName'
      > & { functionName?: 'updateUserFirstName' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'updateUserFirstName'> & {
        abi?: never
        functionName?: 'updateUserFirstName'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'updateUserFirstName'>({
    abi: dmsdABI,
    functionName: 'updateUserFirstName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"updateUserLastName"`.
 */
export function useDmsdUpdateUserLastName<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'updateUserLastName'>['abi'],
        'updateUserLastName'
      > & { functionName?: 'updateUserLastName' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'updateUserLastName'> & {
        abi?: never
        functionName?: 'updateUserLastName'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'updateUserLastName'>({
    abi: dmsdABI,
    functionName: 'updateUserLastName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__.
 */
export function usePrepareDmsdWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"deleteRecipient"`.
 */
export function usePrepareDmsdDeleteRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'deleteRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'deleteRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'deleteRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerAdmin"`.
 */
export function usePrepareDmsdRegisterAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'registerAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'registerAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'registerAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerRecipient"`.
 */
export function usePrepareDmsdRegisterRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'registerRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'registerRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'registerRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"updateUserEmail"`.
 */
export function usePrepareDmsdUpdateUserEmail(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'updateUserEmail'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'updateUserEmail',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'updateUserEmail'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"updateUserFirstName"`.
 */
export function usePrepareDmsdUpdateUserFirstName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'updateUserFirstName'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'updateUserFirstName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'updateUserFirstName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"updateUserLastName"`.
 */
export function usePrepareDmsdUpdateUserLastName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'updateUserLastName'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'updateUserLastName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'updateUserLastName'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsdEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: dmsdABI, ...config } as UseContractEventConfig<
    typeof dmsdABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"LogNewUser"`.
 */
export function useDmsdLogNewUserEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'LogNewUser'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'LogNewUser',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'LogNewUser'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"LogUpdateUser"`.
 */
export function useDmsdLogUpdateUserEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'LogUpdateUser'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'LogUpdateUser',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'LogUpdateUser'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWallet(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: multiSigWalletABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWalletRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getOwners"`.
 */
export function useMultiSigWalletGetOwners<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'getOwners'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'getOwners', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'getOwners',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getTransaction"`.
 */
export function useMultiSigWalletGetTransaction<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'getTransaction'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'getTransaction',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'getTransaction',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'getTransaction',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getTransactionCount"`.
 */
export function useMultiSigWalletGetTransactionCount<
  TSelectData = ReadContractResult<
    typeof multiSigWalletABI,
    'getTransactionCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'getTransactionCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'getTransactionCount',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'getTransactionCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"isConfirmed"`.
 */
export function useMultiSigWalletIsConfirmed<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'isConfirmed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'isConfirmed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'isConfirmed',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'isConfirmed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"isOwner"`.
 */
export function useMultiSigWalletIsOwner<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'isOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'isOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof multiSigWalletABI, 'isOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"numConfirmationsRequired"`.
 */
export function useMultiSigWalletNumConfirmationsRequired<
  TSelectData = ReadContractResult<
    typeof multiSigWalletABI,
    'numConfirmationsRequired'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'numConfirmationsRequired',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'numConfirmationsRequired',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'numConfirmationsRequired',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"owners"`.
 */
export function useMultiSigWalletOwners<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'owners'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'owners', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'owners',
    ...config,
  } as UseContractReadConfig<typeof multiSigWalletABI, 'owners', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"transactions"`.
 */
export function useMultiSigWalletTransactions<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'transactions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'transactions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'transactions',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'transactions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWalletWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multiSigWalletABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof multiSigWalletABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiSigWalletABI, TFunctionName>({
    abi: multiSigWalletABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function useMultiSigWalletConfirmTransaction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'confirmTransaction'
        >['abi'],
        'confirmTransaction'
      > & { functionName?: 'confirmTransaction' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'confirmTransaction'
      > & {
        abi?: never
        functionName?: 'confirmTransaction'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof multiSigWalletABI,
    'confirmTransaction'
  >({
    abi: multiSigWalletABI,
    functionName: 'confirmTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useMultiSigWalletExecuteTransaction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'executeTransaction'
        >['abi'],
        'executeTransaction'
      > & { functionName?: 'executeTransaction' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'executeTransaction'
      > & {
        abi?: never
        functionName?: 'executeTransaction'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof multiSigWalletABI,
    'executeTransaction'
  >({
    abi: multiSigWalletABI,
    functionName: 'executeTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function useMultiSigWalletRevokeConfirmation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'revokeConfirmation'
        >['abi'],
        'revokeConfirmation'
      > & { functionName?: 'revokeConfirmation' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'revokeConfirmation'
      > & {
        abi?: never
        functionName?: 'revokeConfirmation'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof multiSigWalletABI,
    'revokeConfirmation'
  >({
    abi: multiSigWalletABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function useMultiSigWalletSubmitTransaction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'submitTransaction'
        >['abi'],
        'submitTransaction'
      > & { functionName?: 'submitTransaction' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'submitTransaction'
      > & {
        abi?: never
        functionName?: 'submitTransaction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiSigWalletABI, 'submitTransaction'>(
    {
      abi: multiSigWalletABI,
      functionName: 'submitTransaction',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function usePrepareMultiSigWalletWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigWalletABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigWalletABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function usePrepareMultiSigWalletConfirmTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'confirmTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'confirmTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'confirmTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareMultiSigWalletExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'executeTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'executeTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'executeTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function usePrepareMultiSigWalletRevokeConfirmation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'revokeConfirmation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'revokeConfirmation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function usePrepareMultiSigWalletSubmitTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'submitTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'submitTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'submitTransaction'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWalletEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"ConfirmTransaction"`.
 */
export function useMultiSigWalletConfirmTransactionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'ConfirmTransaction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'ConfirmTransaction',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'ConfirmTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"Deposit"`.
 */
export function useMultiSigWalletDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"ExecuteTransaction"`.
 */
export function useMultiSigWalletExecuteTransactionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'ExecuteTransaction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'ExecuteTransaction',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'ExecuteTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"RevokeConfirmation"`.
 */
export function useMultiSigWalletRevokeConfirmationEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'RevokeConfirmation'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'RevokeConfirmation',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'RevokeConfirmation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"SubmitTransaction"`.
 */
export function useMultiSigWalletSubmitTransactionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'SubmitTransaction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'SubmitTransaction',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'SubmitTransaction'>)
}
