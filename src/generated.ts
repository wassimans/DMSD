// Generated by @wagmi/cli@0.1.15 on 4/9/2023 at 07:04:26
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DMSD
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const dmsdABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'email', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LogDeleteUser',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'recoveryAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'LogNewPersonalMultisig',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owners',
        internalType: 'address[]',
        type: 'address[]',
        indexed: true,
      },
      {
        name: 'numConfirmationsRequired',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'LogNewRecipientMultisig',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'userAddress',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'index',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'email', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'LogNewUser',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'adminAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_recovAddr', internalType: 'address', type: 'address' }],
    name: 'createPersonalMultisig',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      {
        name: '_numConfirmationsRequired',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
    name: 'createRecipientsMultisig',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dToken',
    outputs: [{ name: '', internalType: 'contract ERC20', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRecoveryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
    ],
    name: 'getUser',
    outputs: [
      { name: 'userEmail', internalType: 'string', type: 'string' },
      { name: 'firstName', internalType: 'string', type: 'string' },
      { name: 'lastName', internalType: 'string', type: 'string' },
      { name: 'isAdmin', internalType: 'bool', type: 'bool' },
      { name: 'isRegistered', internalType: 'bool', type: 'bool' },
      { name: 'withRecipients', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'getUserAtIndex',
    outputs: [
      { name: 'userAddress', internalType: 'address', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'personalMultiSig',
    outputs: [
      { name: '', internalType: 'contract MultiSigWallet', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'recipientMultiSig',
    outputs: [
      { name: '', internalType: 'contract MultiSigWallet', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'recoveryAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userEmail', internalType: 'string', type: 'string' },
      { name: '_firstName', internalType: 'string', type: 'string' },
      { name: '_lastName', internalType: 'string', type: 'string' },
    ],
    name: 'registerAdmin',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_userAddress', internalType: 'address', type: 'address' },
      { name: '_userEmail', internalType: 'string', type: 'string' },
      { name: '_firstName', internalType: 'string', type: 'string' },
      { name: '_lastName', internalType: 'string', type: 'string' },
    ],
    name: 'registerRecipient',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_dToken', internalType: 'address', type: 'address' }],
    name: 'setToken',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_amount', internalType: 'uint256', type: 'uint256' }],
    name: 'transferToMultisig',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'userIndex',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'users',
    outputs: [
      { name: 'email', internalType: 'string', type: 'string' },
      { name: 'firstName', internalType: 'string', type: 'string' },
      { name: 'lastName', internalType: 'string', type: 'string' },
      { name: 'isRegistered', internalType: 'bool', type: 'bool' },
      { name: 'isAdmin', internalType: 'bool', type: 'bool' },
      { name: 'withRecipients', internalType: 'bool', type: 'bool' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iTokenABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: 'name_', internalType: 'string', type: 'string' },
      { name: 'symbol_', internalType: 'string', type: 'string' },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'subtractedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'addedValue', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Metadata
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20MetadataABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MultiSigWallet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multiSigWalletABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      {
        name: '_numConfirmationsRequired',
        internalType: 'uint256',
        type: 'uint256',
      },
    ],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ConfirmTransaction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'balance',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'ExecuteTransaction',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
    ],
    name: 'RevokeConfirmation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'txIndex',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'SubmitTransaction',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmTransaction',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'executeTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'getTransaction',
    outputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      { name: 'numConfirmations', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTransactionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isConfirmed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numConfirmationsRequired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_txIndex', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeConfirmation',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_to', internalType: 'address', type: 'address' },
      { name: '_value', internalType: 'uint256', type: 'uint256' },
      { name: '_data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'submitTransaction',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'transactions',
    outputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
      { name: 'numConfirmations', internalType: 'uint256', type: 'uint256' },
    ],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Utils
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const utilsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'userNum', internalType: 'uint256', type: 'uint256' }],
    name: 'createUsers',
    outputs: [
      { name: '', internalType: 'address payable[]', type: 'address[]' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getNextUserAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'numBlocks', internalType: 'uint256', type: 'uint256' }],
    name: 'mineBlocks',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsd(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: dmsdABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsdRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof dmsdABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: dmsdABI, ...config } as UseContractReadConfig<
    typeof dmsdABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"adminAddress"`.
 */
export function useDmsdAdminAddress<
  TSelectData = ReadContractResult<typeof dmsdABI, 'adminAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'adminAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'adminAddress',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'adminAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"dToken"`.
 */
export function useDmsdDToken<
  TSelectData = ReadContractResult<typeof dmsdABI, 'dToken'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'dToken', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'dToken',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'dToken', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"getRecoveryAddress"`.
 */
export function useDmsdGetRecoveryAddress<
  TSelectData = ReadContractResult<typeof dmsdABI, 'getRecoveryAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'getRecoveryAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'getRecoveryAddress',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'getRecoveryAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"getUser"`.
 */
export function useDmsdGetUser<
  TSelectData = ReadContractResult<typeof dmsdABI, 'getUser'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'getUser', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'getUser',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'getUser', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"getUserAtIndex"`.
 */
export function useDmsdGetUserAtIndex<
  TSelectData = ReadContractResult<typeof dmsdABI, 'getUserAtIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'getUserAtIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'getUserAtIndex',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'getUserAtIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"personalMultiSig"`.
 */
export function useDmsdPersonalMultiSig<
  TSelectData = ReadContractResult<typeof dmsdABI, 'personalMultiSig'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'personalMultiSig', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'personalMultiSig',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'personalMultiSig', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"recipientMultiSig"`.
 */
export function useDmsdRecipientMultiSig<
  TSelectData = ReadContractResult<typeof dmsdABI, 'recipientMultiSig'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'recipientMultiSig', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'recipientMultiSig',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'recipientMultiSig', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"recoveryAddress"`.
 */
export function useDmsdRecoveryAddress<
  TSelectData = ReadContractResult<typeof dmsdABI, 'recoveryAddress'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'recoveryAddress', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'recoveryAddress',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'recoveryAddress', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"userIndex"`.
 */
export function useDmsdUserIndex<
  TSelectData = ReadContractResult<typeof dmsdABI, 'userIndex'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'userIndex', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'userIndex',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'userIndex', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"users"`.
 */
export function useDmsdUsers<
  TSelectData = ReadContractResult<typeof dmsdABI, 'users'>,
>(
  config: Omit<
    UseContractReadConfig<typeof dmsdABI, 'users', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: dmsdABI,
    functionName: 'users',
    ...config,
  } as UseContractReadConfig<typeof dmsdABI, 'users', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsdWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof dmsdABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, TFunctionName>({
    abi: dmsdABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"createPersonalMultisig"`.
 */
export function useDmsdCreatePersonalMultisig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dmsdABI,
          'createPersonalMultisig'
        >['abi'],
        'createPersonalMultisig'
      > & { functionName?: 'createPersonalMultisig' }
    : UseContractWriteConfig<
        TMode,
        typeof dmsdABI,
        'createPersonalMultisig'
      > & {
        abi?: never
        functionName?: 'createPersonalMultisig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'createPersonalMultisig'>({
    abi: dmsdABI,
    functionName: 'createPersonalMultisig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"createRecipientsMultisig"`.
 */
export function useDmsdCreateRecipientsMultisig<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof dmsdABI,
          'createRecipientsMultisig'
        >['abi'],
        'createRecipientsMultisig'
      > & { functionName?: 'createRecipientsMultisig' }
    : UseContractWriteConfig<
        TMode,
        typeof dmsdABI,
        'createRecipientsMultisig'
      > & {
        abi?: never
        functionName?: 'createRecipientsMultisig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'createRecipientsMultisig'>({
    abi: dmsdABI,
    functionName: 'createRecipientsMultisig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerAdmin"`.
 */
export function useDmsdRegisterAdmin<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'registerAdmin'>['abi'],
        'registerAdmin'
      > & { functionName?: 'registerAdmin' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'registerAdmin'> & {
        abi?: never
        functionName?: 'registerAdmin'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'registerAdmin'>({
    abi: dmsdABI,
    functionName: 'registerAdmin',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerRecipient"`.
 */
export function useDmsdRegisterRecipient<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'registerRecipient'>['abi'],
        'registerRecipient'
      > & { functionName?: 'registerRecipient' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'registerRecipient'> & {
        abi?: never
        functionName?: 'registerRecipient'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'registerRecipient'>({
    abi: dmsdABI,
    functionName: 'registerRecipient',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"setToken"`.
 */
export function useDmsdSetToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'setToken'>['abi'],
        'setToken'
      > & { functionName?: 'setToken' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'setToken'> & {
        abi?: never
        functionName?: 'setToken'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'setToken'>({
    abi: dmsdABI,
    functionName: 'setToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"transferToMultisig"`.
 */
export function useDmsdTransferToMultisig<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof dmsdABI, 'transferToMultisig'>['abi'],
        'transferToMultisig'
      > & { functionName?: 'transferToMultisig' }
    : UseContractWriteConfig<TMode, typeof dmsdABI, 'transferToMultisig'> & {
        abi?: never
        functionName?: 'transferToMultisig'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof dmsdABI, 'transferToMultisig'>({
    abi: dmsdABI,
    functionName: 'transferToMultisig',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__.
 */
export function usePrepareDmsdWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"createPersonalMultisig"`.
 */
export function usePrepareDmsdCreatePersonalMultisig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'createPersonalMultisig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'createPersonalMultisig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'createPersonalMultisig'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"createRecipientsMultisig"`.
 */
export function usePrepareDmsdCreateRecipientsMultisig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'createRecipientsMultisig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'createRecipientsMultisig',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof dmsdABI,
    'createRecipientsMultisig'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerAdmin"`.
 */
export function usePrepareDmsdRegisterAdmin(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'registerAdmin'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'registerAdmin',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'registerAdmin'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"registerRecipient"`.
 */
export function usePrepareDmsdRegisterRecipient(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'registerRecipient'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'registerRecipient',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'registerRecipient'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"setToken"`.
 */
export function usePrepareDmsdSetToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'setToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'setToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'setToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link dmsdABI}__ and `functionName` set to `"transferToMultisig"`.
 */
export function usePrepareDmsdTransferToMultisig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof dmsdABI, 'transferToMultisig'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: dmsdABI,
    functionName: 'transferToMultisig',
    ...config,
  } as UsePrepareContractWriteConfig<typeof dmsdABI, 'transferToMultisig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__.
 */
export function useDmsdEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: dmsdABI, ...config } as UseContractEventConfig<
    typeof dmsdABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"LogDeleteUser"`.
 */
export function useDmsdLogDeleteUserEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'LogDeleteUser'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'LogDeleteUser',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'LogDeleteUser'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"LogNewPersonalMultisig"`.
 */
export function useDmsdLogNewPersonalMultisigEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'LogNewPersonalMultisig'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'LogNewPersonalMultisig',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'LogNewPersonalMultisig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"LogNewRecipientMultisig"`.
 */
export function useDmsdLogNewRecipientMultisigEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'LogNewRecipientMultisig'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'LogNewRecipientMultisig',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'LogNewRecipientMultisig'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"LogNewUser"`.
 */
export function useDmsdLogNewUserEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'LogNewUser'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'LogNewUser',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'LogNewUser'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link dmsdABI}__ and `eventName` set to `"Transfer"`.
 */
export function useDmsdTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof dmsdABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: dmsdABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof dmsdABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iTokenABI}__.
 */
export function useIToken(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iTokenABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTokenABI}__.
 */
export function useITokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iTokenABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iTokenABI, ...config } as UseContractReadConfig<
    typeof iTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useITokenAllowance<
  TSelectData = ReadContractResult<typeof iTokenABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTokenABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof iTokenABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useITokenBalanceOf<
  TSelectData = ReadContractResult<typeof iTokenABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTokenABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iTokenABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useITokenTotalSupply<
  TSelectData = ReadContractResult<typeof iTokenABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof iTokenABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof iTokenABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenABI}__.
 */
export function useITokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTokenABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iTokenABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTokenABI, TFunctionName>({
    abi: iTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useITokenApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTokenABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof iTokenABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTokenABI, 'approve'>({
    abi: iTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useITokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTokenABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof iTokenABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTokenABI, 'transfer'>({
    abi: iTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useITokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iTokenABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof iTokenABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iTokenABI, 'transferFrom'>({
    abi: iTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenABI}__.
 */
export function usePrepareITokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareITokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareITokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareITokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTokenABI}__.
 */
export function useITokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iTokenABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTokenABI,
    ...config,
  } as UseContractEventConfig<typeof iTokenABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useITokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useITokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useErc20DecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'decreaseAllowance'>['abi'],
        'decreaseAllowance'
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'decreaseAllowance'> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'decreaseAllowance'>({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useErc20IncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'increaseAllowance'>['abi'],
        'increaseAllowance'
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'increaseAllowance'> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'increaseAllowance'>({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareErc20DecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareErc20IncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: ierc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20ABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: ierc20ABI, ...config } as UseContractReadConfig<
    typeof ierc20ABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20Allowance<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'allowance', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20BalanceOf<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'balanceOf', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20TotalSupply<
  TSelectData = ReadContractResult<typeof ierc20ABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof ierc20ABI, 'totalSupply', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, TFunctionName>({
    abi: ierc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'approve'>({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transfer'>({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof ierc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20ABI, 'transferFrom'>({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function usePrepareIerc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__.
 */
export function useIerc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20Metadata(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20MetadataABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"allowance"`.
 */
export function useIerc20MetadataAllowance<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'allowance'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'allowance', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'allowance',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIerc20MetadataBalanceOf<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'balanceOf'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'balanceOf', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'balanceOf',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"decimals"`.
 */
export function useIerc20MetadataDecimals<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'decimals'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'decimals', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"name"`.
 */
export function useIerc20MetadataName<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'name'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'name', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"symbol"`.
 */
export function useIerc20MetadataSymbol<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'symbol'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof ierc20MetadataABI, 'symbol', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIerc20MetadataTotalSupply<
  TSelectData = ReadContractResult<typeof ierc20MetadataABI, 'totalSupply'>,
>(
  config: Omit<
    UseContractReadConfig<typeof ierc20MetadataABI, 'totalSupply', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20MetadataABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<
    typeof ierc20MetadataABI,
    'totalSupply',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, TFunctionName>({
    abi: ierc20MetadataABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function useIerc20MetadataApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'approve'>({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function useIerc20MetadataTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20MetadataABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof ierc20MetadataABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transfer'>({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIerc20MetadataTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20MetadataABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof ierc20MetadataABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20MetadataABI, 'transferFrom'>({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function usePrepareIerc20MetadataWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIerc20MetadataApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIerc20MetadataTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20MetadataABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIerc20MetadataTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20MetadataABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20MetadataABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__.
 */
export function useIerc20MetadataEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Approval"`.
 */
export function useIerc20MetadataApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ierc20MetadataABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIerc20MetadataTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: ierc20MetadataABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof ierc20MetadataABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWallet(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: multiSigWalletABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWalletRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof multiSigWalletABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getOwners"`.
 */
export function useMultiSigWalletGetOwners<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'getOwners'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'getOwners', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'getOwners',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getTransaction"`.
 */
export function useMultiSigWalletGetTransaction<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'getTransaction'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'getTransaction',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'getTransaction',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'getTransaction',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"getTransactionCount"`.
 */
export function useMultiSigWalletGetTransactionCount<
  TSelectData = ReadContractResult<
    typeof multiSigWalletABI,
    'getTransactionCount'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'getTransactionCount',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'getTransactionCount',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'getTransactionCount',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"isConfirmed"`.
 */
export function useMultiSigWalletIsConfirmed<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'isConfirmed'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'isConfirmed', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'isConfirmed',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'isConfirmed',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"isOwner"`.
 */
export function useMultiSigWalletIsOwner<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'isOwner'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'isOwner', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof multiSigWalletABI, 'isOwner', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"numConfirmationsRequired"`.
 */
export function useMultiSigWalletNumConfirmationsRequired<
  TSelectData = ReadContractResult<
    typeof multiSigWalletABI,
    'numConfirmationsRequired'
  >,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'numConfirmationsRequired',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'numConfirmationsRequired',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'numConfirmationsRequired',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"owners"`.
 */
export function useMultiSigWalletOwners<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'owners'>,
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigWalletABI, 'owners', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'owners',
    ...config,
  } as UseContractReadConfig<typeof multiSigWalletABI, 'owners', TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"transactions"`.
 */
export function useMultiSigWalletTransactions<
  TSelectData = ReadContractResult<typeof multiSigWalletABI, 'transactions'>,
>(
  config: Omit<
    UseContractReadConfig<
      typeof multiSigWalletABI,
      'transactions',
      TSelectData
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: multiSigWalletABI,
    functionName: 'transactions',
    ...config,
  } as UseContractReadConfig<
    typeof multiSigWalletABI,
    'transactions',
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWalletWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multiSigWalletABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof multiSigWalletABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiSigWalletABI, TFunctionName>({
    abi: multiSigWalletABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function useMultiSigWalletConfirmTransaction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'confirmTransaction'
        >['abi'],
        'confirmTransaction'
      > & { functionName?: 'confirmTransaction' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'confirmTransaction'
      > & {
        abi?: never
        functionName?: 'confirmTransaction'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof multiSigWalletABI,
    'confirmTransaction'
  >({
    abi: multiSigWalletABI,
    functionName: 'confirmTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useMultiSigWalletExecuteTransaction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'executeTransaction'
        >['abi'],
        'executeTransaction'
      > & { functionName?: 'executeTransaction' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'executeTransaction'
      > & {
        abi?: never
        functionName?: 'executeTransaction'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof multiSigWalletABI,
    'executeTransaction'
  >({
    abi: multiSigWalletABI,
    functionName: 'executeTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function useMultiSigWalletRevokeConfirmation<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'revokeConfirmation'
        >['abi'],
        'revokeConfirmation'
      > & { functionName?: 'revokeConfirmation' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'revokeConfirmation'
      > & {
        abi?: never
        functionName?: 'revokeConfirmation'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof multiSigWalletABI,
    'revokeConfirmation'
  >({
    abi: multiSigWalletABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function useMultiSigWalletSubmitTransaction<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof multiSigWalletABI,
          'submitTransaction'
        >['abi'],
        'submitTransaction'
      > & { functionName?: 'submitTransaction' }
    : UseContractWriteConfig<
        TMode,
        typeof multiSigWalletABI,
        'submitTransaction'
      > & {
        abi?: never
        functionName?: 'submitTransaction'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multiSigWalletABI, 'submitTransaction'>(
    {
      abi: multiSigWalletABI,
      functionName: 'submitTransaction',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function usePrepareMultiSigWalletWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigWalletABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigWalletABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function usePrepareMultiSigWalletConfirmTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'confirmTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'confirmTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'confirmTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareMultiSigWalletExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'executeTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'executeTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'executeTransaction'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function usePrepareMultiSigWalletRevokeConfirmation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'revokeConfirmation'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'revokeConfirmation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigWalletABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function usePrepareMultiSigWalletSubmitTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof multiSigWalletABI,
      'submitTransaction'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multiSigWalletABI,
    functionName: 'submitTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof multiSigWalletABI,
    'submitTransaction'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__.
 */
export function useMultiSigWalletEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"ConfirmTransaction"`.
 */
export function useMultiSigWalletConfirmTransactionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'ConfirmTransaction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'ConfirmTransaction',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'ConfirmTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"Deposit"`.
 */
export function useMultiSigWalletDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"ExecuteTransaction"`.
 */
export function useMultiSigWalletExecuteTransactionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'ExecuteTransaction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'ExecuteTransaction',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'ExecuteTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"RevokeConfirmation"`.
 */
export function useMultiSigWalletRevokeConfirmationEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'RevokeConfirmation'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'RevokeConfirmation',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'RevokeConfirmation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigWalletABI}__ and `eventName` set to `"SubmitTransaction"`.
 */
export function useMultiSigWalletSubmitTransactionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigWalletABI, 'SubmitTransaction'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: multiSigWalletABI,
    eventName: 'SubmitTransaction',
    ...config,
  } as UseContractEventConfig<typeof multiSigWalletABI, 'SubmitTransaction'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtils(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: utilsABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtilsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof utilsABI, TFunctionName>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: utilsABI, ...config } as UseContractReadConfig<
    typeof utilsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useUtilsIsTest<
  TSelectData = ReadContractResult<typeof utilsABI, 'IS_TEST'>,
>(
  config: Omit<
    UseContractReadConfig<typeof utilsABI, 'IS_TEST', TSelectData>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: utilsABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof utilsABI, 'IS_TEST', TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtilsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof utilsABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof utilsABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof utilsABI, TFunctionName>({
    abi: utilsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"createUsers"`.
 */
export function useUtilsCreateUsers<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof utilsABI, 'createUsers'>['abi'],
        'createUsers'
      > & { functionName?: 'createUsers' }
    : UseContractWriteConfig<TMode, typeof utilsABI, 'createUsers'> & {
        abi?: never
        functionName?: 'createUsers'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof utilsABI, 'createUsers'>({
    abi: utilsABI,
    functionName: 'createUsers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"failed"`.
 */
export function useUtilsFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof utilsABI, 'failed'>['abi'],
        'failed'
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<TMode, typeof utilsABI, 'failed'> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof utilsABI, 'failed'>({
    abi: utilsABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function useUtilsGetNextUserAddress<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof utilsABI,
          'getNextUserAddress'
        >['abi'],
        'getNextUserAddress'
      > & { functionName?: 'getNextUserAddress' }
    : UseContractWriteConfig<TMode, typeof utilsABI, 'getNextUserAddress'> & {
        abi?: never
        functionName?: 'getNextUserAddress'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof utilsABI, 'getNextUserAddress'>({
    abi: utilsABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"mineBlocks"`.
 */
export function useUtilsMineBlocks<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof utilsABI, 'mineBlocks'>['abi'],
        'mineBlocks'
      > & { functionName?: 'mineBlocks' }
    : UseContractWriteConfig<TMode, typeof utilsABI, 'mineBlocks'> & {
        abi?: never
        functionName?: 'mineBlocks'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof utilsABI, 'mineBlocks'>({
    abi: utilsABI,
    functionName: 'mineBlocks',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__.
 */
export function usePrepareUtilsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"createUsers"`.
 */
export function usePrepareUtilsCreateUsers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'createUsers'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'createUsers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'createUsers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareUtilsFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"getNextUserAddress"`.
 */
export function usePrepareUtilsGetNextUserAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'getNextUserAddress'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'getNextUserAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'getNextUserAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link utilsABI}__ and `functionName` set to `"mineBlocks"`.
 */
export function usePrepareUtilsMineBlocks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof utilsABI, 'mineBlocks'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: utilsABI,
    functionName: 'mineBlocks',
    ...config,
  } as UsePrepareContractWriteConfig<typeof utilsABI, 'mineBlocks'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__.
 */
export function useUtilsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    ...config,
  } as UseContractEventConfig<typeof utilsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log"`.
 */
export function useUtilsLogEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_address"`.
 */
export function useUtilsLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_array"`.
 */
export function useUtilsLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useUtilsLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useUtilsLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_int"`.
 */
export function useUtilsLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useUtilsLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useUtilsLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useUtilsLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useUtilsLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useUtilsLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useUtilsLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useUtilsLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useUtilsLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useUtilsLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_string"`.
 */
export function useUtilsLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"log_uint"`.
 */
export function useUtilsLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link utilsABI}__ and `eventName` set to `"logs"`.
 */
export function useUtilsLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof utilsABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: utilsABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof utilsABI, 'logs'>)
}
